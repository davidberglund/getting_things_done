Krav på organisationer idag:
Leverera tjänster som tillfredställer användarnas behov
Hög verksamhetsförståelse
Förutse förändringar av riktlinjer och lagar som påverkar systemen
Svara effektivt på upptäckta sårbarheter, säkerhetsrisker eller förändringar i samhället.

DevOps, en definition:
“En organisatorisk och kulturell rörelse
som ska hjälpa till att
leverera mjukvara oftare,
förbättra tillgängligheten och pålitligheten för tjänster,
och att bygga 
ett delat ägarskap emellan intressenter.
För att lyckas med det behöver utvecklare och drifttekniker fokusera på mindre komponenter
och mindre överlämningar.”

Målet är..
Delat ägarskap,
mindre komponenter,
korta utvecklingslivscykler, hög driftsättningsfrekvens, 
mindre överlämningar och
möjliggörandet av snabb återställning vid fel 
leder till färre fel vid förändringar (change) och
högre tillgänglighet och pålitlighet för tjänster.


[Transformational leadership] --> [Lean product management]
[Transformational leadership] --> [Technical practices]
[Software delivery performance] <--> [Lean product management]
[Lean product management] --> [Organizational performance] 
[Software delivery performance] --> [Organizational performance] 
[Technical practices] --> [Continuous delivery]
[Continuous delivery] --> [Less deployment pain]
[Continuous delivery] --> [Software delivery performance]

<Transformational leadership>
Personal recognition
Supportive leadership
Intellectual stimulation
Inspirational communication
Vision

<Lean product management>
Team experimentation
Working in small batches
Gathering and implementing customer feedback

<Technical practices>
Continuous integration
Deployment automation
Loosely coupled architecture
Empowered teams
Test automation
Trunk based development
Shifting left on security
-----------

<DevOps culture: Westrum organizational culture>
https://cloud.google.com/architecture/devops/devops-culture-westrum-organizational-culture

:)
Generative:
_Performance oriented_
High cooperation
Messengers trained
Risks are shared
Bridging encouraged
Failure leads to inquiry
Novelty implemented

:(
Bureaucratic:
_Rule oriented_
Modest cooperation
Messengers neglected
Narrow responsibilities
Bridging tolerated
Failure leads to justice
Novelty leads to problems

:( :(
Pathological:
_Power oriented_
Low cooperation
Messengers "shot"
Responsibilities shirked
Bridging discouraged
Failure leads to scapegoating
Novelty crushed

- Wanted behaviours for a generative culture:
High cooperation.
Messengers are trained.
Risks are shared.
Bridging is encouraged.
Failure leads to inquiry.
Novelty is implemented.

Based on these aspects, here are some practices you can implement to improve your culture:
- High cooperation. Create cross-functional teams that include representatives from each functional area of the software delivery process (business analysts, developers, quality engineers, ops, security, and so on). This practice lets everyone share the responsibility for building, deploying, and maintaining a product. It's also important that there is good cooperation within the team.

- Train the messengers. This means we want people to bring us bad news so we can make things better. Hold blameless postmortems. By removing blame, you remove fear; and by removing fear, you enable teams to surface problems and solve them more effectively. Also create and foster an environment where it is safe to take smart risks and fail, so that anyone can surface problems at any time—even without the ceremony of a postmortem.

- Share risks. Along with this, encourage shared responsibilities. Quality, availability, reliability and security are everyone's job. One way to improve the quality of your services is to ensure that developers share responsibility for maintaining their code in production. The improvement in collaboration that comes from sharing responsibility inherently reduces risk: The more eyes on the software delivery process, the more you'll avoid errors in process or planning. Automation also reduces risk, and with the right tool choice, can enable collaboration.

- Encourage bridging. Break down silos. In addition to creating cross-functional teams, techniques for breaking down silos include co-locating ops with the dev team; including ops in planning throughout the software delivery lifecycle; and implementing ChatOps. Another tip is to identify someone in the organization whose work you don't understand (or whose work frustrates you, like procurement) and invite them to coffee or lunch. Informal discussions help foster better communication, and you may understand why they do what they do—and you can come up with creative solutions together.

- Let failure lead to inquiry. Again, hold blameless postmortems. The response to failure shapes the culture of an organization. Blaming individuals for failures creates a negative culture. If instead, failures lead you to ask questions about what caused the failures and how you can keep them from happening again in the future, you've improved your technical system, your processes, and your culture.

- Implement novelty. Encourage experimentation. Giving employees freedom to explore new ideas can lead to great outcomes. Some companies give engineers time each week for experimentation. Others host internal hack days or mini-conferences to share ideas and collaborate. Many new features and products began this way. When you release your employees from habitual pathways and repetitive tasks, they can generate enormous value for your organization. And remember that novelty isn't limited to new products and features. Also encourage and reward improvements in process and ideas that help foster collaboration.

Common pitfalls of organizational culture
Organizational cultures with high information flow often encounter the following pitfalls:
Ignoring the importance of culture altogether, and treating technical work as a technology and process challenge only.
Focusing only on local team cultures, and not reaching out to also understand how team cultures interact with the broader organizational culture.
Not having enough support, or appropriate support, from leaders and managers for the necessary culture shift and transformation.
Ignoring or punishing bad news. It's better to understand that failures are inevitable in complex systems, and treat them as opportunities to improve and learn.
Not encouraging novelty. Admiral Grace Hopper, the famed computer science pioneer and inventor of the compiler, once said, "The most dangerous phrase in the language is ‘we've always done it this way.'" Allowing and encouraging teams to experiment and try new things will make work better.

How to measure orgs culture:
On my team, information is actively sought.
Messengers are not punished when they deliver news of failures or other bad news.
On my team, responsibilities are shared.
On my team, cross-functional collaboration is encouraged and rewarded.
On my team, failure causes inquiry.
On my team, new ideas are welcomed.

Tactical leadership in tech: "Lead by making it easy for others to follow"

<Motivation>
Daniel Pink (Dan Pink https://www.youtube.com/watch?v=rrkrvAUbU9Y&ab_channel=TED)
< Purpose - Mastery - Autonomy = Drive >
Purpose + Mastery = Discipline
Mastery + Autonomy = Dedication
Purpose + Autonomy = Desire 

< Syfte + Briljans + Självständighet = Driv >
Syfte + Briljans = Disciplin
Briljans + Självständighet = Engagemang
Syfte + Självständighet = Aptit

Syfte + Behärska + Självständig = Driv
Syfte + Briljans = Disciplin
Briljans + Självständighet = Engagemang
Syfte + Självständighet = Aptit

ROWE: Results ONLY Work Environment
- möten är valfritt, visa resultatmotivation


